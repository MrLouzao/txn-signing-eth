{"version":3,"sources":["../app.js"],"names":["privateKey","Buffer","from","userWallet","Wallet","fromPrivateKey","publicKey","getPublicKeyString","address","getAddressString","console","log","getPrivateKeyString","eip1559Transaction","common","Common","chain","hardfork","txData","tx","FeeMarketEIP1559Transaction","fromTxData","signedTx","sign","v","rawTx","serialize","toString","legacyRlpTransaction","Transaction","subscribe","require","isNetworkConnected","isConnected","isConn"],"mappings":"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","sourcesContent":["import Common from '@ethereumjs/common'\nimport { FeeMarketEIP1559Transaction, Transaction } from '@ethereumjs/tx'\nimport Wallet from 'ethereumjs-wallet';\n\n// Key and wallet generation - global variables\nconst privateKey = Buffer.from(\n    'e331b6d69882b4cb4ea581d88e0b604039a3de5967688d3dcffdd2270c0fd109',\n    'hex',\n)\n\nconst userWallet = Wallet.fromPrivateKey(privateKey)\nconst publicKey = userWallet.getPublicKeyString()\nconst address = userWallet.getAddressString()\n\nconsole.log('private key: ' + userWallet.getPrivateKeyString())\nconsole.log('public key: ' + publicKey)\nconsole.log('address: ' + address)\n\n\n/**\n * Sign a transaction of type EIP-1559 (type 2)\n */\nfunction eip1559Transaction() {\n    // Common is not necessary at all if it's provided as a parameter. Signature should be included.\n    const common = new Common({ chain: 'mainnet', hardfork: 'london'})\n\n    const txData = {\n        \"data\": \"0x0\",\n        \"gasLimit\": \"0x02625a00\",\n        \"maxPriorityFeePerGas\": \"0x01\",\n        \"maxFeePerGas\": \"0xff\",\n        \"nonce\": \"0x00\",\n        \"to\": \"0x203D17B4a1725E001426b7Ab3193E6657b0dBcc6\",\n        \"value\": \"0x0186a0\",\n        \"chainId\": \"0x1\",\n        \"accessList\": [],\n        \"type\": \"0x02\"\n    }\n\n    const tx = FeeMarketEIP1559Transaction.fromTxData(txData, {common})\n\n\n    // Signing transaction\n    const signedTx = tx.sign(privateKey)\n    //console.log(\"Signed tx content --> \", signedTx)\n\n    // Check v value:\n    const v = signedTx.v;\n    console.log(\"v = \" + v)\n\n    // Signed Tx in HEX\n    const rawTx = \"0x\" + signedTx.serialize().toString(\"hex\")\n    console.log(\"RAW tx: \"  + rawTx)\n}\n\n/**\n * Legacy transaction signed without type, rlp encoded\n */\nfunction legacyRlpTransaction() {\n    const txData = {\n        \"data\": \"0x0\",              // No contract data\n        \"gasLimit\": \"0xF4240\",      // 1 000 000\n        \"gasPrice\": \"0x6FC23AC00\",  //  30 Gwei\n        \"nonce\": \"0x00\",            // Nonce in Ropsten starts in 1048576\n        \"to\": \"0x203D17B4a1725E001426b7Ab3193E6657b0dBcc6\",\n        \"value\": \"0x0186a0\"\n    }\n\n    // This is generating a transaction for mainnet. If we want to set the testnet, we need to use the common module\n    // as we do in EIP1559 transactions\n    var tx = new Transaction(txData);\n    // Signing transaction\n    const signedTx = tx.sign(privateKey)\n    //console.log(\"Signed tx content --> \", signedTx)\n \n    // Check v value:\n    const v = signedTx.v;\n    console.log(\"v = \" + v)\n\n    // In case of signing for mainnet a legacy txn, the values are {36,37}. In case of Ropsten, this can change\n    if (!(v == 36 || v !== 37)) {\n        throw \"v is not {36,37}, your legacy transaction is not replay safe\"\n    }\n \n    // Signed Tx in HEX\n    const rawTx = \"0x\" + signedTx.serialize().toString(\"hex\")\n    console.log(\"RAW tx: \"  + rawTx)\n}\n\n// Execute the transaction that you want (legacy, eip1559)\n//eip1559Transaction()\n//legacyRlpTransaction()\n\n// Only sign transactions if the network is offline\nconst subscribe = require('./checkConnection')\nvar isNetworkConnected = false\nsubscribe(function(isConnected) {\n    const isConn = isConnected? \"connected\" : \"disconnected\"\n    console.log(\"Network status change::\" + isConn)\n    isNetworkConnected = isConnected\n})\n\n// TODO - this dependency does not work well with Babel\n//const txnSign = require('./txnSign')\n//const signedEip1559Txn = txnSign(privateKey, \"eip1559\")\n//console.log(\"SIGNED EIP1559 TXN: \" + signedEip1559Txn)\n"],"file":"app.js"}