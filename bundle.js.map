{"version":3,"sources":["app.js"],"names":[],"mappings":";;AAAA;;AACA;;AACA;;;;AAEA;AACA,IAAM,UAAU,GAAG,MAAM,CAAC,IAAP,CACf,kEADe,EAEf,KAFe,CAAnB;;AAKA,IAAM,UAAU,GAAG,6BAAO,cAAP,CAAsB,UAAtB,CAAnB;;AACA,IAAM,SAAS,GAAG,UAAU,CAAC,kBAAX,EAAlB;AACA,IAAM,OAAO,GAAG,UAAU,CAAC,gBAAX,EAAhB;AAEA,OAAO,CAAC,GAAR,CAAY,kBAAkB,UAAU,CAAC,mBAAX,EAA9B;AACA,OAAO,CAAC,GAAR,CAAY,iBAAiB,SAA7B;AACA,OAAO,CAAC,GAAR,CAAY,cAAc,OAA1B;AAGA;AACA;AACA;;AACA,SAAS,kBAAT,GAA8B;AAC1B;AACA,MAAM,MAAM,GAAG,IAAI,kBAAJ,CAAW;AAAE,IAAA,KAAK,EAAE,SAAT;AAAoB,IAAA,QAAQ,EAAE;AAA9B,GAAX,CAAf;AAEA,MAAM,MAAM,GAAG;AACX,YAAQ,KADG;AAEX,gBAAY,YAFD;AAGX,4BAAwB,MAHb;AAIX,oBAAgB,MAJL;AAKX,aAAS,MALE;AAMX,UAAM,4CANK;AAOX,aAAS,UAPE;AAQX,eAAW,KARA;AASX,kBAAc,EATH;AAUX,YAAQ;AAVG,GAAf;;AAaA,MAAM,EAAE,GAAG,gCAA4B,UAA5B,CAAuC,MAAvC,EAA+C;AAAC,IAAA,MAAM,EAAN;AAAD,GAA/C,CAAX,CAjB0B,CAoB1B;;;AACA,MAAM,QAAQ,GAAG,EAAE,CAAC,IAAH,CAAQ,UAAR,CAAjB,CArB0B,CAsB1B;AAEA;;AACA,MAAM,CAAC,GAAG,QAAQ,CAAC,CAAnB;AACA,EAAA,OAAO,CAAC,GAAR,CAAY,SAAS,CAArB,EA1B0B,CA4B1B;;AACA,MAAM,KAAK,GAAG,OAAO,QAAQ,CAAC,SAAT,GAAqB,QAArB,CAA8B,KAA9B,CAArB;AACA,EAAA,OAAO,CAAC,GAAR,CAAY,aAAc,KAA1B;AACH;AAED;AACA;AACA;;;AACA,SAAS,oBAAT,GAAgC;AAC5B,MAAM,MAAM,GAAG;AACX,YAAQ,KADG;AACiB;AAC5B,gBAAY,SAFD;AAEiB;AAC5B,gBAAY,aAHD;AAGiB;AAC5B,aAAS,MAJE;AAIiB;AAC5B,UAAM,4CALK;AAMX,aAAS;AANE,GAAf,CAD4B,CAU5B;AACA;;AACA,MAAI,EAAE,GAAG,IAAI,eAAJ,CAAgB,MAAhB,CAAT,CAZ4B,CAa5B;;AACA,MAAM,QAAQ,GAAG,EAAE,CAAC,IAAH,CAAQ,UAAR,CAAjB,CAd4B,CAe5B;AAEA;;AACA,MAAM,CAAC,GAAG,QAAQ,CAAC,CAAnB;AACA,EAAA,OAAO,CAAC,GAAR,CAAY,SAAS,CAArB,EAnB4B,CAqB5B;;AACA,MAAI,EAAE,CAAC,IAAI,EAAL,IAAW,CAAC,KAAK,EAAnB,CAAJ,EAA4B;AACxB,UAAM,8DAAN;AACH,GAxB2B,CA0B5B;;;AACA,MAAM,KAAK,GAAG,OAAO,QAAQ,CAAC,SAAT,GAAqB,QAArB,CAA8B,KAA9B,CAArB;AACA,EAAA,OAAO,CAAC,GAAR,CAAY,aAAc,KAA1B;AACH,C,CAED;AACA;;;AACA,oBAAoB","file":"bundle.js","sourcesContent":["import Common from '@ethereumjs/common'\nimport { FeeMarketEIP1559Transaction, Transaction } from '@ethereumjs/tx'\nimport Wallet from 'ethereumjs-wallet';\n\n// Key and wallet generation - global variables\nconst privateKey = Buffer.from(\n    'e331b6d69882b4cb4ea581d88e0b604039a3de5967688d3dcffdd2270c0fd109',\n    'hex',\n)\n\nconst userWallet = Wallet.fromPrivateKey(privateKey)\nconst publicKey = userWallet.getPublicKeyString()\nconst address = userWallet.getAddressString()\n\nconsole.log('private key: ' + userWallet.getPrivateKeyString())\nconsole.log('public key: ' + publicKey)\nconsole.log('address: ' + address)\n\n\n/**\n * Sign a transaction of type EIP-1559 (type 2)\n */\nfunction eip1559Transaction() {\n    // Common is not necessary at all if it's provided as a parameter. Signature should be included.\n    const common = new Common({ chain: 'mainnet', hardfork: 'london'})\n\n    const txData = {\n        \"data\": \"0x0\",\n        \"gasLimit\": \"0x02625a00\",\n        \"maxPriorityFeePerGas\": \"0x01\",\n        \"maxFeePerGas\": \"0xff\",\n        \"nonce\": \"0x00\",\n        \"to\": \"0x203D17B4a1725E001426b7Ab3193E6657b0dBcc6\",\n        \"value\": \"0x0186a0\",\n        \"chainId\": \"0x1\",\n        \"accessList\": [],\n        \"type\": \"0x02\"\n    }\n\n    const tx = FeeMarketEIP1559Transaction.fromTxData(txData, {common})\n\n\n    // Signing transaction\n    const signedTx = tx.sign(privateKey)\n    //console.log(\"Signed tx content --> \", signedTx)\n\n    // Check v value:\n    const v = signedTx.v;\n    console.log(\"v = \" + v)\n\n    // Signed Tx in HEX\n    const rawTx = \"0x\" + signedTx.serialize().toString(\"hex\")\n    console.log(\"RAW tx: \"  + rawTx)\n}\n\n/**\n * Legacy transaction signed without type, rlp encoded\n */\nfunction legacyRlpTransaction() {\n    const txData = {\n        \"data\": \"0x0\",              // No contract data\n        \"gasLimit\": \"0xF4240\",      // 1 000 000\n        \"gasPrice\": \"0x6FC23AC00\",  //  30 Gwei\n        \"nonce\": \"0x00\",            // Nonce in Ropsten starts in 1048576\n        \"to\": \"0x203D17B4a1725E001426b7Ab3193E6657b0dBcc6\",\n        \"value\": \"0x0186a0\"\n    }\n\n    // This is generating a transaction for mainnet. If we want to set the testnet, we need to use the common module\n    // as we do in EIP1559 transactions\n    var tx = new Transaction(txData);\n    // Signing transaction\n    const signedTx = tx.sign(privateKey)\n    //console.log(\"Signed tx content --> \", signedTx)\n \n    // Check v value:\n    const v = signedTx.v;\n    console.log(\"v = \" + v)\n\n    // In case of signing for mainnet a legacy txn, the values are {36,37}. In case of Ropsten, this can change\n    if (!(v == 36 || v !== 37)) {\n        throw \"v is not {36,37}, your legacy transaction is not replay safe\"\n    }\n \n    // Signed Tx in HEX\n    const rawTx = \"0x\" + signedTx.serialize().toString(\"hex\")\n    console.log(\"RAW tx: \"  + rawTx)\n}\n\n// Execute the transaction that you want (legacy, eip1559)\n//eip1559Transaction()\nlegacyRlpTransaction()\n"]}